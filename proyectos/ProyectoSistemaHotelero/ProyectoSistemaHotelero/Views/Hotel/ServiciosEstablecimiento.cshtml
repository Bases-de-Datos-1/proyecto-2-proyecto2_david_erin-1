@model List<Servicio>
@{
    ViewData["Title"] = "Servicios Disponibles - UTravel";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .main-content {
        background-color: #f8f9fa;
        min-height: 100vh;
        padding: 100px 0 150px 0;
    }

    .form-title {
        font-size: 32px;
        color: #333;
        margin-bottom: 60px;
        font-weight: 600;
        text-align: center;
        line-height: 1.3;
    }

    .services-container {
        max-width: 800px;
        margin: 0 auto;
        background: white;
        padding: 50px;
        border-radius: 0;
        box-shadow: none;
        border: none;
    }

    .services-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 15px;
        margin-bottom: 40px;
    }

    .service-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 20px 10px;
        border: 1px solid #ddd;
        border-radius: 8px;
        transition: all 0.3s ease;
        cursor: pointer;
        background: white;
        min-height: 120px;
        text-align: center;
    }

        .service-item:hover {
            border-color: #7db8b3;
            background-color: #f8fdfc;
        }

        .service-item.selected {
            border-color: #7db8b3;
            background-color: #e8f6f3;
        }

    .service-checkbox {
        display: none;
    }

    .service-icon {
        width: 50px;
        height: 50px;
        background-color: #666;
        border-radius: 8px;
        margin-bottom: 15px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 24px;
    }

    .service-label {
        font-size: 14px;
        font-weight: 500;
        color: #333;
        cursor: pointer;
        text-align: center;
        line-height: 1.3;
    }

    .siguiente-btn {
        background: #666;
        color: white;
        border: none;
        border-radius: 20px;
        padding: 12px 30px;
        font-size: 16px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        margin: 30px auto 0 auto;
        display: block;
    }

        .siguiente-btn:hover {
            background: #555;
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }

    .container {
        max-width: 900px;
    }
</style>

<div class="main-content">
    <div class="container">
        <h2 class="form-title">Servicios disponibles en el<br>establecimiento</h2>

        <div class="services-container">
            <form id="serviciosForm">
                <div class="services-grid">
                    @foreach (var servicio in Model)
                    {
                        <div class="service-item" onclick="toggleService(this, @servicio.ServicioID)">
                            <input type="checkbox" class="service-checkbox" id="servicio-@servicio.ServicioID" 
                                   name="servicios" value="@servicio.ServicioID">
                            <div class="service-icon">
                                <i class="@GetIconForService(servicio.Nombre)"></i>
                            </div>
                            <div class="service-label">@servicio.Nombre</div>
                        </div>
                    }
                </div>

                <button type="button" class="siguiente-btn" onclick="continuarSiguientePaso()">
                    Siguiente
                </button>
            </form>
        </div>
    </div>
</div>

@functions {
    public string GetIconForService(string serviceName)
    {
        // Mapea nombres de servicios a clases de iconos FontAwesome
        return serviceName.ToLower() switch
        {
            var name when name.Contains("teléfono") => "fas fa-phone",
            var name when name.Contains("wifi") => "fas fa-wifi",
            var name when name.Contains("lavadora") => "fas fa-tshirt",
            var name when name.Contains("balcón") => "fas fa-building",
            var name when name.Contains("restaurante") => "fas fa-utensils",
            var name when name.Contains("aire") => "fas fa-snowflake",
            var name when name.Contains("piscina") => "fas fa-swimmer",
            var name when name.Contains("patio") => "fas fa-tree",
            _ => "fas fa-concierge-bell" // Icono predeterminado para servicios
        };
    }
}

@section Scripts {
    <script>
        function toggleService(element, serviceId) {
            const checkbox = document.getElementById("servicio-" + serviceId);

            // Toggle checkbox
            checkbox.checked = !checkbox.checked;

            // Toggle visual state
            if (checkbox.checked) {
                element.classList.add('selected');
            } else {
                element.classList.remove('selected');
            }
        }

        function continuarSiguientePaso() {
            const form = document.getElementById('serviciosForm');

            // Obtener servicios seleccionados (ahora usando IDs de la base de datos)
            const checkboxes = form.querySelectorAll('input[name="servicios"]:checked');
            const serviciosSeleccionados = Array.from(checkboxes).map(cb => parseInt(cb.value));

            // Guardar en sessionStorage
            sessionStorage.setItem('serviciosDisponibles', JSON.stringify(serviciosSeleccionados));

            // Redirigir al paso de creación de usuario administrador
            window.location.href = '@Url.Action("CrearUsuarioAdminHotel", "Hotel")';
        }

        // Mantener el código para prevenir el toggle doble
        document.addEventListener('DOMContentLoaded', function() {
            const checkboxes = document.querySelectorAll('.service-checkbox');
            const labels = document.querySelectorAll('.service-label');

            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('click', function(e) {
                    e.stopPropagation();
                });
            });

            labels.forEach(label => {
                label.addEventListener('click', function(e) {
                    e.stopPropagation();
                });
            });
        });
    </script>
}