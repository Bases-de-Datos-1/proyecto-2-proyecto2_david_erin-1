using Microsoft.AspNetCore.Mvc;
using Microsoft.Data.SqlClient;
using ProyectoSistemaHotelero.Models;
using ProyectoSistemaHotelero.Models.ViewModels;
using System.Data;

namespace ProyectoSistemaHotelero.Controllers
{
    public class BusquedaController : Controller
    {
        private readonly string _connectionString;

        public BusquedaController(IConfiguration configuration)
        {
            _connectionString = configuration.GetConnectionString("DefaultConnection");
        }

        [HttpGet]
        public async Task<IActionResult> Hoteles(string ubicacion = "",
            DateTime? checkIn = null, DateTime? checkOut = null,
            int personas = 1, int pagina = 1)
        {
            var viewModel = new BusquedaHotelesViewModel
            {
                Ubicacion = ubicacion,
                FechaCheckIn = checkIn ?? DateTime.Now.AddDays(1),
                FechaCheckOut = checkOut ?? DateTime.Now.AddDays(2),
                CantidadPersonas = personas,
                PaginaActual = pagina
            };

            // Cargar servicios y comodidades para filtros
            viewModel.ServiciosDisponibles = await ObtenerServicios();
            viewModel.ComodidadesDisponibles = await ObtenerComodidades();

            // Realizar búsqueda si hay criterios
            if (!string.IsNullOrEmpty(ubicacion))
            {
                await RealizarBusqueda(viewModel);
            }

            return View(viewModel);
        }

        [HttpPost]
        public async Task<IActionResult> BuscarHoteles(BusquedaHotelesViewModel modelo)
        {
            modelo.ServiciosDisponibles = await ObtenerServicios();
            modelo.ComodidadesDisponibles = await ObtenerComodidades();

            await RealizarBusqueda(modelo);

            return View("Hoteles", modelo);
        }

        [HttpPost]
        public async Task<IActionResult> AplicarFiltros(BusquedaHotelesViewModel modelo)
        {
            modelo.ServiciosDisponibles = await ObtenerServicios();
            modelo.ComodidadesDisponibles = await ObtenerComodidades();
            modelo.PaginaActual = 1; // Resetear a primera página

            await RealizarBusqueda(modelo);

            return View("Hoteles", modelo);
        }

        private async Task RealizarBusqueda(BusquedaHotelesViewModel viewModel)
        {
            using var connection = new SqlConnection(_connectionString);
            using var command = new SqlCommand("sp_BuscarHotelesAvanzado", connection)
            {
                CommandType = CommandType.StoredProcedure
            };

            // Parámetros del stored procedure
            command.Parameters.AddWithValue("@Ubicacion", viewModel.Ubicacion ?? "");
            command.Parameters.AddWithValue("@FechaCheckIn", viewModel.FechaCheckIn);
            command.Parameters.AddWithValue("@FechaCheckOut", viewModel.FechaCheckOut);
            command.Parameters.AddWithValue("@CantidadPersonas", viewModel.CantidadPersonas);

            command.Parameters.AddWithValue("@PrecioMinimo",
                viewModel.PrecioMinimo.HasValue ? viewModel.PrecioMinimo.Value : DBNull.Value);
            command.Parameters.AddWithValue("@PrecioMaximo",
                viewModel.PrecioMaximo.HasValue ? viewModel.PrecioMaximo.Value : DBNull.Value);

            // Convertir listas a strings separados por comas
            var serviciosIds = viewModel.ServiciosSeleccionados?.Any() == true
                ? string.Join(",", viewModel.ServiciosSeleccionados)
                : null;
            var comodidadesIds = viewModel.ComodidadesSeleccionadas?.Any() == true
                ? string.Join(",", viewModel.ComodidadesSeleccionadas)
                : null;

            command.Parameters.AddWithValue("@ServiciosIDs", serviciosIds ?? (object)DBNull.Value);
            command.Parameters.AddWithValue("@ComodidadesIDs", comodidadesIds ?? (object)DBNull.Value);

            await connection.OpenAsync();
            using var reader = await command.ExecuteReaderAsync();

            var resultados = new List<HotelResultado>();

            while (await reader.ReadAsync())
            {
                var hotel = new HotelResultado
                {
                    CedulaJuridica = reader["CedulaJuridica"].ToString(),
                    Nombre = reader["Nombre"].ToString(),
                    TipoHotel = reader["TipoHotel"].ToString(),
                    UbicacionCompleta = reader["UbicacionCompleta"].ToString(),
                    CorreoElectronico = reader["CorreoElectronico"].ToString(),
                    URLSitioWeb = reader["URLSitioWeb"]?.ToString(),
                    PrecioMinimo = Convert.ToDecimal(reader["PrecioMinimo"]),
                    PrecioMaximo = Convert.ToDecimal(reader["PrecioMaximo"])
                };

                // Obtener imagen principal y servicios del hotel
                await EnriquecerDatosHotel(hotel);

                resultados.Add(hotel);
            }

            // Aplicar paginación
            viewModel.TotalResultados = resultados.Count;
            var inicio = (viewModel.PaginaActual - 1) * viewModel.ResultadosPorPagina;
            viewModel.Resultados = resultados.Skip(inicio)
                                            .Take(viewModel.ResultadosPorPagina)
                                            .ToList();
        }

        private async Task EnriquecerDatosHotel(HotelResultado hotel)
        {
            using var connection = new SqlConnection(_connectionString);
            await connection.OpenAsync();

            // Obtener imagen principal (primera imagen de habitación disponible)
            var imgQuery = @"
                SELECT TOP 1 IH.NombreArchivo 
                FROM ImagenesHabitacion IH
                INNER JOIN TipoHabitacion TH ON IH.TipoHabitacionID = TH.TipoHabitacionID
                WHERE TH.CedulaJuridica = @CedulaJuridica
                ORDER BY IH.ImagenHabitacionID";

            using var imgCommand = new SqlCommand(imgQuery, connection);
            imgCommand.Parameters.AddWithValue("@CedulaJuridica", hotel.CedulaJuridica);

            var imagen = await imgCommand.ExecuteScalarAsync();
            hotel.ImagenPrincipal = imagen?.ToString();

            // Obtener servicios del hotel
            var serviciosQuery = @"
                SELECT S.Nombre 
                FROM HotelServicios HS
                INNER JOIN Servicios S ON HS.ServicioID = S.ServicioID
                WHERE HS.CedulaJuridica = @CedulaJuridica";

            using var serviciosCommand = new SqlCommand(serviciosQuery, connection);
            serviciosCommand.Parameters.AddWithValue("@CedulaJuridica", hotel.CedulaJuridica);

            using var serviciosReader = await serviciosCommand.ExecuteReaderAsync();
            while (await serviciosReader.ReadAsync())
            {
                hotel.Servicios.Add(serviciosReader["Nombre"].ToString());
            }
        }

        private async Task<List<Servicio>> ObtenerServicios()
        {
            var servicios = new List<Servicio>();

            using var connection = new SqlConnection(_connectionString);
            var query = "SELECT ServicioID, Nombre FROM Servicios ORDER BY Nombre";
            using var command = new SqlCommand(query, connection);

            await connection.OpenAsync();
            using var reader = await command.ExecuteReaderAsync();

            while (await reader.ReadAsync())
            {
                servicios.Add(new Servicio
                {
                    ServicioID = Convert.ToInt32(reader["ServicioID"]),
                    Nombre = reader["Nombre"].ToString()
                });
            }

            return servicios;
        }

        private async Task<List<Comodidad>> ObtenerComodidades()
        {
            var comodidades = new List<Comodidad>();

            using var connection = new SqlConnection(_connectionString);
            var query = "SELECT ComodidadID, Nombre FROM Comodidades ORDER BY Nombre";
            using var command = new SqlCommand(query, connection);

            await connection.OpenAsync();
            using var reader = await command.ExecuteReaderAsync();

            while (await reader.ReadAsync())
            {
                comodidades.Add(new Comodidad
                {
                    ComodidadID = Convert.ToInt32(reader["ComodidadID"]),
                    Nombre = reader["Nombre"].ToString()
                });
            }

            return comodidades;
        }

        [HttpGet]
        public async Task<IActionResult> DetalleHotel(string cedulaJuridica)
        {
            // Implementar vista de detalle del hotel
            return View();
        }
    }
