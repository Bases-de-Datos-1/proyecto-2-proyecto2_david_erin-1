using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using ProyectoSistemaHotelero.Models;
using ProyectoSistemaHotelero.Models.ViewModels;
using ProyectoSistemaHotelero.Services;
using System.Security.Claims;
using System.Text.Json;

namespace ProyectoSistemaHotelero.Controllers
{
    public class HotelController : Controller
    {
        private readonly HotelService _hotelService;

        public HotelController(HotelService hotelService)
        {
            _hotelService = hotelService;
        }

        [HttpGet]
        public async Task<IActionResult> RegistroHospedaje()
        {
            var tiposHotel = await _hotelService.GetTiposHotelAsync();
            return View(tiposHotel);
        }

        [HttpPost]
        public IActionResult GuardarTipoHotel(int tipoHotelId)
        {
            // Guardar en TempData para recuperarlo después
            TempData["TipoHotelID"] = tipoHotelId;
            return RedirectToAction("FormularioHospedaje");
        }

        [HttpGet]
        public async Task<IActionResult> FormularioHospedaje()
        {
            ViewBag.TipoHotelID = TempData["TipoHotelID"];
            return View();
        }

        [HttpGet]
        public async Task<IActionResult> DetallesHospedaje()
        {
            var redesSociales = await _hotelService.GetRedesSocialesAsync();
            return View(redesSociales);
        }   


        [HttpGet]
        public async Task<IActionResult> DireccionEstablecimiento()
        {
            return View();
        }

        [HttpGet]
        public async Task<IActionResult> ServiciosEstablecimiento()
        {
            var servicios = await _hotelService.GetServiciosAsync();
            return View(servicios);
        }

        [HttpGet]
        public IActionResult CrearUsuarioAdminHotel()
        {
            // Esta vista se mostrará después de seleccionar los servicios
            return View();
        }

        [HttpGet]
        public async Task<IActionResult> ConfirmacionRegistro()
        {
            // Aquí podrías cargar información adicional si es necesario
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> RegistrarHotel([FromBody] JsonElement data)
        {
            try
            {
                // Obtener todos los datos del sessionStorage que se enviaron desde el cliente
                var informacionEspecifica = JsonSerializer.Deserialize<Dictionary<string, object>>(
                    data.GetProperty("informacionEspecifica").ToString(),
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                
                var redesSociales = JsonSerializer.Deserialize<Dictionary<string, string>>(
                    data.GetProperty("redesSociales").ToString(),
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                
                var direccion = JsonSerializer.Deserialize<Dictionary<string, string>>(
                    data.GetProperty("direccion").ToString(),
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                
                var serviciosIds = JsonSerializer.Deserialize<List<int>>(
                    data.GetProperty("servicios").ToString(),
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                
                var usuarioAdmin = JsonSerializer.Deserialize<Dictionary<string, string>>(
                    data.GetProperty("usuario").ToString(),
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                // Mapear los datos a nuestro ViewModel
                var viewModel = new RegistroHotelViewModel
                {
                    Hotel = new EmpresaHotel
                    {
                        CedulaJuridica = informacionEspecifica["cedulaJuridica"].ToString(),
                        Nombre = informacionEspecifica["nombreEstablecimiento"].ToString(),
                        TipoHotelID = int.Parse(informacionEspecifica["tipoHotelID"].ToString()),
                        Provincia = direccion["provincia"],
                        Canton = direccion["canton"],
                        Distrito = direccion["distrito"],
                        Barrio = direccion["barrio"],
                        SeniasExactas = direccion["senasExactas"],
                        ReferenciaGPS = direccion.ContainsKey("referenciaGps") ? direccion["referenciaGps"] : null,
                        CorreoElectronico = informacionEspecifica["correoElectronico"].ToString(),
                        URLSitioWeb = informacionEspecifica.ContainsKey("urlSitioWeb") ?
                                 informacionEspecifica["urlSitioWeb"].ToString() : null
                    },
                    ServiciosSeleccionados = serviciosIds,
                    Telefonos = new List<TelefonoViewModel>(),
                    Usuario = new UsuarioSistemaHotelViewModel
                    {
                        Nombre = usuarioAdmin["nombre"],
                        Apellido = usuarioAdmin["apellido"],
                        Email = usuarioAdmin["email"],
                        Contrasenia = usuarioAdmin["contrasenia"]
                    }
                };


               
                // Agregar teléfonos
                if (informacionEspecifica.ContainsKey("telefono1"))
                {
                    viewModel.Telefonos.Add(new TelefonoViewModel 
                    { 
                        CodigoPais = informacionEspecifica["codigoTelefono1"].ToString(),
                        Numero = informacionEspecifica["telefono1"].ToString() 
                    });
                }

                if (informacionEspecifica.ContainsKey("telefono2") && !string.IsNullOrEmpty(informacionEspecifica["telefono2"].ToString()))
                {
                    viewModel.Telefonos.Add(new TelefonoViewModel 
                    { 
                        CodigoPais = informacionEspecifica["codigoTelefono2"].ToString(),
                        Numero = informacionEspecifica["telefono2"].ToString() 
                    });
                }

                if (informacionEspecifica.ContainsKey("telefono3") && !string.IsNullOrEmpty(informacionEspecifica["telefono3"].ToString()))
                {
                    viewModel.Telefonos.Add(new TelefonoViewModel 
                    { 
                        CodigoPais = informacionEspecifica["codigoTelefono3"].ToString(),
                        Numero = informacionEspecifica["telefono3"].ToString() 
                    });
                }

                // Agregar redes sociales
                var listaRedesSociales = await _hotelService.GetRedesSocialesAsync();
                foreach (var redSocial in listaRedesSociales)
                {
                    var keyName = redSocial.Nombre.ToLower().Replace(" ", "");
                    if (redesSociales.ContainsKey(keyName) && !string.IsNullOrEmpty(redesSociales[keyName]))
                    {
                        viewModel.RedesSociales.Add(new RedSocialViewModel
                        {
                            RedSocialID = redSocial.RedSocialID,
                            NombreUsuario = redesSociales[keyName]
                        });
                    }
                }

                // Registrar en la base de datos
                var result = await _hotelService.RegisterHotelAsync(viewModel);
                
                if (result)
                {
                    return Json(new { success = true, message = "Hotel registrado exitosamente" });
                }
                else
                {
                    return Json(new { success = false, message = "Error al registrar el hotel" });
                }
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = $"Error: {ex.Message}" });
            }
        }

        [HttpGet]
        public IActionResult AdministrarHabitaciones()
        {

            string cedulaJuridica = User.FindFirstValue("CedulaJuridica");

            var hotel = _hotelService.GetHotelByCedulaJuridica(cedulaJuridica);
            if (hotel != null)
            {
                ViewBag.NombreServicio = hotel.Nombre;
            }
            
            
            
            return View();
        }

        
        [HttpGet]
        public async Task<IActionResult> AgregarTipoHabitacion()
        {
            string cedulaJuridica = User.FindFirstValue("CedulaJuridica");

            var viewModel = new TipoHabitacionViewModel
            {
                TiposCama = await _hotelService.GetTiposCamaAsync(),
                CedulaJuridica = cedulaJuridica
            };

            return View(viewModel);
        }

        [HttpPost]
        public async Task<IActionResult> AgregarTipoHabitacion(TipoHabitacionViewModel model)
        {
            if (!ModelState.IsValid)
            {
                model.TiposCama = await _hotelService.GetTiposCamaAsync();
                return View(model);
            }

            // Asignar la cédula jurídica del usuario actual si no está presente
            if (string.IsNullOrEmpty(model.CedulaJuridica))
            {
                model.CedulaJuridica = User.FindFirstValue("CedulaJuridica");
            }

            // Guardar en TempData para recuperarlo en la siguiente vista
            TempData["TipoHabitacion"] = JsonSerializer.Serialize(model);

            return RedirectToAction("SeleccionarComodidades");
        }

        [HttpGet]
        public async Task<IActionResult> SeleccionarComodidades()
        {
            // Recuperar los datos del tipo de habitación
            var tipoHabitacionJson = TempData["TipoHabitacion"]?.ToString();
            if (string.IsNullOrEmpty(tipoHabitacionJson))
            {
                return RedirectToAction("AgregarTipoHabitacion");
            }

            // Mantener los datos en TempData
            TempData.Keep("TipoHabitacion");

            var tipoHabitacion = JsonSerializer.Deserialize<TipoHabitacionViewModel>(tipoHabitacionJson);
            var comodidades = await _hotelService.GetComodidadesAsync();

            var viewModel = new TipoHabitacionComodidadesViewModel
            {
                TipoHabitacion = tipoHabitacion,
                Comodidades = comodidades
            };

            return View(viewModel);
        }

        [HttpPost]
        public async Task<IActionResult> GuardarComodidades(List<int> comodidadesSeleccionadas)
        {
            // Recuperar los datos del tipo de habitación
            var tipoHabitacionJson = TempData["TipoHabitacion"]?.ToString();
            if (string.IsNullOrEmpty(tipoHabitacionJson))
            {
                return RedirectToAction("AgregarTipoHabitacion");
            }

            // Mantener los datos en TempData
            TempData.Keep("TipoHabitacion");

            // Guardar las comodidades seleccionadas en TempData
            TempData["ComodidadesSeleccionadas"] = JsonSerializer.Serialize(comodidadesSeleccionadas);

            return RedirectToAction("CargarImagenes");
        }

        [HttpGet]
        public IActionResult CargarImagenes()
        {
            // Recuperar los datos del tipo de habitación
            var tipoHabitacionJson = TempData["TipoHabitacion"]?.ToString();
            var comodidadesJson = TempData["ComodidadesSeleccionadas"]?.ToString();

            if (string.IsNullOrEmpty(tipoHabitacionJson) || string.IsNullOrEmpty(comodidadesJson))
            {
                return RedirectToAction("AgregarTipoHabitacion");
            }

            // Mantener los datos en TempData
            TempData.Keep("TipoHabitacion");
            TempData.Keep("ComodidadesSeleccionadas");

            var tipoHabitacion = JsonSerializer.Deserialize<TipoHabitacionViewModel>(tipoHabitacionJson);
            var comodidadesSeleccionadas = JsonSerializer.Deserialize<List<int>>(comodidadesJson);

            var viewModel = new TipoHabitacionImagenesViewModel
            {
                TipoHabitacion = tipoHabitacion,
                ComodidadesSeleccionadas = comodidadesSeleccionadas
            };

            return View(viewModel);
        }

        [HttpPost]
        public async Task<IActionResult> GuardarImagenes(List<IFormFile> imagenes)
        {
            try
            {
                // Debug: Verificar que lleguen las imágenes
                Console.WriteLine($"Número de imágenes recibidas: {imagenes?.Count ?? 0}");

                if (imagenes == null || imagenes.Count == 0)
                {
                    TempData["ErrorMessage"] = "No se recibieron imágenes para procesar.";
                    return RedirectToAction("CargarImagenes");
                }

                // Recuperar los datos del tipo de habitación y comodidades
                var tipoHabitacionJson = TempData["TipoHabitacion"]?.ToString();
                var comodidadesJson = TempData["ComodidadesSeleccionadas"]?.ToString();

                Console.WriteLine($"TipoHabitacion JSON: {!string.IsNullOrEmpty(tipoHabitacionJson)}");
                Console.WriteLine($"Comodidades JSON: {!string.IsNullOrEmpty(comodidadesJson)}");

                if (string.IsNullOrEmpty(tipoHabitacionJson) || string.IsNullOrEmpty(comodidadesJson))
                {
                    TempData["ErrorMessage"] = "Se perdieron los datos de la sesión. Por favor intenta de nuevo.";
                    return RedirectToAction("AgregarTipoHabitacion");
                }

                var tipoHabitacion = JsonSerializer.Deserialize<TipoHabitacionViewModel>(tipoHabitacionJson);
                var comodidadesSeleccionadas = JsonSerializer.Deserialize<List<int>>(comodidadesJson);

                Console.WriteLine($"Tipo habitación deserializado: {tipoHabitacion?.Nombre}");
                Console.WriteLine($"Comodidades deserializadas: {comodidadesSeleccionadas?.Count ?? 0}");

                // Validar que las imágenes tengan contenido
                var imagenesValidas = imagenes.Where(img => img != null && img.Length > 0).ToList();
                Console.WriteLine($"Imágenes válidas: {imagenesValidas.Count}");

                if (imagenesValidas.Count == 0)
                {
                    TempData["ErrorMessage"] = "Las imágenes seleccionadas no son válidas.";
                    return RedirectToAction("CargarImagenes");
                }

                // Llamar al servicio para guardar todo
                Console.WriteLine("Llamando al servicio AddTipoHabitacionCompleto...");
                var result = await _hotelService.AddTipoHabitacionCompleto(tipoHabitacion, comodidadesSeleccionadas, imagenesValidas);

                Console.WriteLine($"Resultado del servicio: {result}");

                if (result)
                {
                    TempData["SuccessMessage"] = "El tipo de habitación ha sido añadido correctamente.";
                    // Limpiar TempData después del éxito
                    TempData.Remove("TipoHabitacion");
                    TempData.Remove("ComodidadesSeleccionadas");
                }
                else
                {
                    TempData["ErrorMessage"] = "Ha ocurrido un error al guardar la información.";
                }

                return RedirectToAction("AdministrarHabitaciones");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error en GuardarImagenes: {ex.Message}");
                Console.WriteLine($"StackTrace: {ex.StackTrace}");

                TempData["ErrorMessage"] = $"Error inesperado: {ex.Message}";
                return RedirectToAction("AdministrarHabitaciones");
            }
        }

        [HttpGet]
        public async Task<IActionResult> AgregarHabitacion()
        {
            string cedulaJuridica = User.FindFirstValue("CedulaJuridica");

            var tiposHabitacion = await _hotelService.GetTiposHabitacionPorHotelAsync(cedulaJuridica);

            var viewModel = new HabitacionViewModel
            {
                CedulaJuridica = cedulaJuridica,
                TiposHabitacion = tiposHabitacion.Select(t => new SelectListItem
                {
                    Value = t.TipoHabitacionID.ToString(),
                    Text = $"{t.Nombre} - ${t.Precio:F2} ({t.CantidadCamas} {t.TipoCama})"
                }).ToList()
            };

            // Verificar si hay tipos de habitación disponibles
            if (!viewModel.TiposHabitacion.Any())
            {
                TempData["ErrorMessage"] = "Debe crear al menos un tipo de habitación antes de agregar habitaciones individuales.";
                return RedirectToAction("AdministrarHabitaciones");
            }

            return View(viewModel);
        }

        public async Task<IActionResult> AgregarHabitacion(AgregarHabitacionViewModel model)
        {
            if (!ModelState.IsValid)
            {
                // Recargar los tipos de habitación
                var tiposHabitacion = await _hotelService.GetTiposHabitacionPorHotelAsync(model.CedulaJuridica);
                model.TiposHabitacion = tiposHabitacion.Select(t => new SelectListItem
                {
                    Value = t.TipoHabitacionID.ToString(),
                    Text = $"{t.Nombre} - ${t.Precio:F2} ({t.CantidadCamas} {t.TipoCama})"
                }).ToList();

                return View(model);
            }

            // Asignar la cédula jurídica del usuario actual si no está presente
            if (string.IsNullOrEmpty(model.CedulaJuridica))
            {
                model.CedulaJuridica = User.FindFirstValue("CedulaJuridica");
            }

            // Verificar si el número ya existe
            var numeroExiste = await _hotelService.VerificarNumeroHabitacionExisteAsync(model.Numero, model.CedulaJuridica);
            if (numeroExiste)
            {
                ModelState.AddModelError("Numero", "Ya existe una habitación con ese número en este hotel");

                // Recargar los tipos de habitación
                var tiposHabitacion = await _hotelService.GetTiposHabitacionPorHotelAsync(model.CedulaJuridica);
                model.TiposHabitacion = tiposHabitacion.Select(t => new SelectListItem
                {
                    Value = t.TipoHabitacionID.ToString(),
                    Text = $"{t.Nombre} - ${t.Precio:F2} ({t.CantidadCamas} {t.TipoCama})"
                }).ToList();

                return View(model);
            }

            var resultado = await _hotelService.AgregarHabitacionAsync(model);

            if (resultado)
            {
                TempData["SuccessMessage"] = $"La habitación número {model.Numero} ha sido agregada correctamente.";
            }
            else
            {
                TempData["ErrorMessage"] = "Ha ocurrido un error al agregar la habitación.";
            }

            return RedirectToAction("AdministrarHabitaciones");
        }



    }
}